package com.usama.orderservice.service;

import java.util.List;

import org.apache.kafka.common.errors.ResourceNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.usama.orderservice.entity.Order;
import com.usama.orderservice.entity.Product;
import com.usama.orderservice.repo.OrderRepository;

@Service
public class OrderServiceImpl implements OrderService {

	private final OrderRepository orderRepo;
	private final WebClient webClient;

	public OrderServiceImpl(OrderRepository orderRepo, WebClient webClient) {
		this.orderRepo = orderRepo;
		this.webClient = webClient;
	}

	@Override
	public List<Order> getAllOrder() {
		return orderRepo.findAll();

	}

	@Override
	public Order getOrderById(Long id) {
		return orderRepo.findById(id)
				.orElseThrow(() -> new ResourceNotFoundException("Order with id : " + id + " not found"));
	}

	@Override
	public void createOrder(Order order) {

//		Check List<Product> availability  
		

		orderRepo.save(order);

	}
	private List<Product> getAvaliableProducts(List<Product> products) {
		List<Product> availableProducts = webClient.post()
				.uri("http://PRODUCT-SERVICE/ps/product/availability")
				.bodyValue(products)
				.retrieve()
				.bodyToFlux(Product.class)
				.collectList()
				.block();
		return availableProducts;
	}

}
