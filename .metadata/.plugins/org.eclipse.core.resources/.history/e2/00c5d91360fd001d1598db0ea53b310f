package com.usama.productservicequery.kafka.config;

import java.util.HashMap;
import java.util.Map;

import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.config.ConcurrentKafkaListenerContainerFactory;
import org.springframework.kafka.config.KafkaListenerContainerFactory;
import org.springframework.kafka.core.ConsumerFactory;
import org.springframework.kafka.core.DefaultKafkaConsumerFactory;
import org.springframework.kafka.listener.ConcurrentMessageListenerContainer;
import org.springframework.kafka.support.serializer.JsonDeserializer;

import com.usama.productservicequery.query.api.entity.ProductRequest;

@EnableKafka
@Configuration
public class KafkaConsumerConfig {

	@Value("${spring.kafka.bootstrap-service}")
	private String bootstrapString;

//	public Map<String, Object> consumerConfig() {
//		Map<String, Object> props = new HashMap<>();
//		props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapString);
//		props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringSerializer.class);
////		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, ProductDeserializer.class);
//		props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, JsonDeserializer.class);
//		return props;
//
//	}
//
//	public ConsumerFactory<String, ProductRequest> consumerFactory() {
//
//		return new DefaultKafkaConsumerFactory<String, ProductRequest>(consumerConfig());
//	}
//
//	public KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<String, ProductRequest>> containerFactory() {
//		ConcurrentKafkaListenerContainerFactory<String, ProductRequest> listenerContainerFactory = new ConcurrentKafkaListenerContainerFactory<String, ProductRequest>();
//		listenerContainerFactory.setConsumerFactory(consumerFactory());
//		return listenerContainerFactory;
//	}

	@Bean
	public ConsumerFactory<String, ProductRequest> consumerFactory() {
		Map<String, Object> props = new HashMap<>();
		props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapString);
//	        props.put(ConsumerConfig.GROUP_ID_CONFIG, groupId);
		return new DefaultKafkaConsumerFactory<>(props, new StringDeserializer(),
				new JsonDeserializer<>(ProductRequest.class));
	}

	@Bean
	KafkaListenerContainerFactory<ConcurrentMessageListenerContainer<String, ProductRequest>> kafkaListenerContainerFactory() {
		ConcurrentKafkaListenerContainerFactory<String, ProductRequest> factory = new ConcurrentKafkaListenerContainerFactory<>();
		factory.setConsumerFactory(consumerFactory());
		return factory;
	}

}
